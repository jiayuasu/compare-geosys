/*
 * FILE: PixelSerializer
 * Copyright (c) 2015 - 2018 GeoSpark Development Team
 *
 * MIT License
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 */
package org.datasyslab.geosparkviz.core.Serde;

import com.esotericsoftware.kryo.Kryo;
import com.esotericsoftware.kryo.Serializer;
import com.esotericsoftware.kryo.io.Input;
import com.esotericsoftware.kryo.io.Output;
import org.apache.log4j.Logger;
import org.datasyslab.geosparkviz.utils.Pixel;

/**
 * This serializer aims at serializing Pixel object. In the generated ByteArray, we put attributes as follows: X, Y, ResolutionX,
 * ResolutionY, isDuplicate, currentPartitionId.
 */
public class PixelSerializer
        extends Serializer<Pixel>
{
    final static Logger log = Logger.getLogger(PixelSerializer.class);

    @Override
    public void write(Kryo kryo, Output output, Pixel object)
    {
        log.debug("Serializing Pixel...");
        output.writeInt(object.getX());
        output.writeInt(object.getY());
        output.writeInt(object.getResolutionX());
        output.writeInt(object.getResolutionY());
        output.writeBoolean(object.isDuplicate());
        output.writeInt(object.getCurrentPartitionId());
    }

    @Override
    public Pixel read(Kryo kryo, Input input, Class<Pixel> type)
    {
        log.debug("De-serializing Pixel...");
        int X = input.readInt();
        int Y = input.readInt();
        int ResolutionX = input.readInt();
        int ResolutionY = input.readInt();
        boolean isDuplicate = input.readBoolean();
        int currentPartitionId = input.readInt();
        Pixel pixel = new Pixel(X, Y, ResolutionX, ResolutionY, isDuplicate, currentPartitionId);
        return pixel;
    }
}
